#!/usr/bin/env ruby

require 'open-uri'
require 'nokogiri'
require 'fileutils'
require 'pry'

STDOUT.sync = true

BASE_PATH = File.expand_path("../", __dir__)
FILES_PATH = File.join(BASE_PATH, "files")
BUILD_PATH = File.join(BASE_PATH, "aria.docset")
RESOURCES_PATH = File.join(BUILD_PATH, "Contents", "Resources")
INDEX_PATH = File.join(RESOURCES_PATH, "docSet.dsidx")
DOCUMENTS_PATH = File.join(RESOURCES_PATH, "Documents")
CSS = File.read(File.join(FILES_PATH, "styles.css"))
INFO = File.read(File.join(FILES_PATH, "Info.plist"))

SOURCE_URL = "https://www.w3.org/TR/wai-aria-1.1/"
SOURCE_DOC = Nokogiri::HTML(open(SOURCE_URL))

def section_to_html(section)
  resource = section["resource"]

  section.at_css("span.permalink").remove

  normalize_links(section)

  builder = Nokogiri::HTML::Builder.new do |b|
    b.html do
      b.comment "Online page at #{SOURCE_URL}#{resource}"
      b.head do
        b.style(type: "text/css") do
          b.text CSS
        end
      end
      b.body do
        b << section
      end
    end
  end

  builder.to_html
end

def definition_to_html(dt)
  id = dt.at_css("dfn")["id"]
  dd = dt.next_element

  [dt, dd].each do |e|
    normalize_links(e)
  end

  builder = Nokogiri::HTML::Builder.new do |b|
    b.html do
      b.comment "Online page at #{SOURCE_URL}##{id}"
      b.head do
        b.style(type: "text/css") do
          b.text CSS
        end
      end
      b.body do
        b.h2 do
          b << dt.at_css("dfn").children
        end
        b << dd.children
      end
    end
  end

  builder.to_html
end

def normalize_links(element)
  element.css("a[href^='#dfn-']").each do |a|
    id = a["href"][1..-1]
    a["href"] = "#{id}.html"
  end

  element.css("a.role-reference").each do |a|
    id = a["href"][1..-1]
    a["href"] = "#{id}.html"
  end

  element.css("a.state-reference").each do |a|
    id = a["href"][1..-1]
    a["href"] = "#{id}.html"
  end

  element.css("a.property-reference").each do |a|
    id = a["href"][1..-1]
    a["href"] = "#{id}.html"
  end

  element.css("a[href^='#']").each do |a|
    a["href"] = SOURCE_URL + a["href"]
  end
end

puts "==> Removing existing build"
FileUtils.rm_rf(BUILD_PATH)

puts "==> Creating build dir"
FileUtils.mkdir_p(DOCUMENTS_PATH)

puts "==> Creating Info.plist"
File.open(File.join(BUILD_PATH, "Contents", "Info.plist"), "w") do |info|
  info << INFO
end

puts "==> Creating Index"
IO.popen(["sqlite3", INDEX_PATH], "w") do |db|

  puts "==> Creating Table"
  db << "CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);\n"
  db << "CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path);\n"

  SOURCE_DOC.css(".termlist > dt").each do |dt|
    type = "Define"
    id = dt.at_css("dfn")["id"]
    name = dt.at_css("dfn").text
    path = "#{id}.html"
    puts "==> Adding #{name} (#{id})"

    File.open(File.join(DOCUMENTS_PATH, path), "w") do |file|
      file << definition_to_html(dt)
    end

    db << "INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES ('#{name}', '#{type}', '#{path}');\n"
  end

  SOURCE_DOC.css("section.role").each do |section|
    name = section.at_css("code").text
    type = "Class"
    fn = section["resource"][1..-1]
    path = "#{fn}.html"

    puts "==> Adding #{name}"

    File.open(File.join(DOCUMENTS_PATH, path), "w") do |file|
      file << section_to_html(section)
    end

    db << "INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES ('#{name}', '#{type}', '#{path}');\n"
  end

  SOURCE_DOC.css("section.property").each do |section|
    name = section.at_css("code").text
    type = "Property"
    fn = section["resource"][1..-1]
    path = "#{fn}.html"

    puts "==> Adding #{name}"

    File.open(File.join(DOCUMENTS_PATH, path), "w") do |file|
      file << section_to_html(section)
    end

    db << "INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES ('#{name}', '#{type}', '#{path}');\n"
  end

  SOURCE_DOC.css("section.state").each do |section|
    name = section.at_css("code").text
    type = "Trait"
    fn = section["resource"][1..-1]
    path = "#{fn}.html"

    puts "==> Adding #{name}"

    File.open(File.join(DOCUMENTS_PATH, path), "w") do |file|
      file << section_to_html(section)
    end

    db << "INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES ('#{name}', '#{type}', '#{path}');\n"
  end

end

puts "==> Done ☺️"
